import{bus}from"../bus.js";import{mixinPlayer,mixinNavigation}from"../mixins.js";import{default as spieldoseSettings}from"../settings.js";const template=function(){return'\n        <div id="player" class="box is-paddingless is-radiusless is-unselectable">\n            <img id="album-cover" v-bind:class="{ \'rotate-album\': hasRotateVinylClass }" v-bind:src="coverSrc" v-on:error="replaceAlbumThumbnailWithLoadError();">\n            \x3c!--\n            <canvas id="canvas"></canvas>\n            --\x3e\n            <nav class="level is-marginless">\n                <div class="level-left">\n                    <span id="song-current-time" class="level-item has-text-grey">{{ currentPlayedSeconds | formatSeconds }}</span>\n                </div>\n                <div class="level-item">\n                    <input id="song-played-progress" class="is-pulled-left" type="range" v-model="songProgress" min="0" max="1" step="0.01" />\n                </div>\n                <div class="level-right">\n                    <span id="song-duration" class="level-item has-text-grey">{{ nowPlayingLength }}</span>\n                </div>\n            </nav>\n            <div id="player-metadata-container" class="has-text-centered">\n                <h1 class="title is-4 cut-text" v-bind:title="nowPlayingTitle">{{ nowPlayingTitle }}</h1>\n                <h2 class="subtitle is-5 cut-text" v-bind:title="nowPlayingArtist"><a href="#" v-on:click.prevent="navigateToArtistPage(nowPlayingArtist);">{{ nowPlayingArtist }}</a></h2>\n            </div>\n            <div id="player-controls" class="is-unselectable">\n                <div class="has-text-centered player-buttons">\n                    <span v-bind:title="$t(\'player.buttons.shufflePlaylistHint\')" v-on:click.prevent="playerData.currentPlaylist.shuffle();" class="icon"><i class="fas fa-2x fa-random"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.toggleRepeatHint\')" v-bind:class="{ \'btn-active\': playerData.repeatTracksMode != \'none\' }" v-on:click.prevent="playerData.playback.toggleRepeatMode();" class="icon"><i class="fas fa-2x fa-redo"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.previousTrackHint\')" id="btn-previous" v-on:click.prevent="playerData.currentPlaylist.playPrevious();" class="icon"><i class="fas fa-2x fa-step-backward"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.pauseTrackHint\')" id="btn-pause" v-on:click.prevent="playerData.playback.pause();" v-if="playerData.isPlaying" class="icon"><i class="fas fa-2x fa-pause"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.playTrackHint\')" id="btn-play" v-on:click.prevent="playerData.playback.play();" v-else class="icon"><i class="fas fa-2x fa-play"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.nextTrackHint\')" id="btn-next" v-on:click.prevent="playerData.currentPlaylist.playNext();" class="icon"><i class="fas fa-2x fa-step-forward"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.unloveTrackHint\')" v-if="nowPlayingLoved" v-on:click.prevent="playerData.currentTrack.unSetLoved();" class="icon btn-active"><i class="fas fa-2x fa-heart"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.loveTrackHint\')" v-else v-on:click.prevent="playerData.currentTrack.setLoved();" class="icon"><i class="fas fa-2x fa-heart"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.downloadTrackHint\')" id="btn-download" class="icon" v-on:click.prevent="playerData.currentTrack.download();"><i class="fas fa-2x fa-save"></i></span>\n                </div>\n                <div id="player-volume-control">\n                    <div class="columns">\n                        <div class="column is-narrow">\n                            <span v-bind:title="$t(\'player.buttons.toggleMuteHint\')" class="icon" v-on:click.prevent="toggleMute">\n                                <i v-if="volume > 0" class="fas fa-2x fa-volume-up"></i>\n                                <i v-else class="fas fa-2x fa-volume-off"></i>\n                            </span>\n                        </div>\n                        <div class="column">\n                            <input id="volume-range" type="range" v-model="volume" min="0" max="1" step="0.05" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    '};export default{name:"spieldose-player-component",template:'\n        <div id="player" class="box is-paddingless is-radiusless is-unselectable">\n            <img id="album-cover" v-bind:class="{ \'rotate-album\': hasRotateVinylClass }" v-bind:src="coverSrc" v-on:error="replaceAlbumThumbnailWithLoadError();">\n            \x3c!--\n            <canvas id="canvas"></canvas>\n            --\x3e\n            <nav class="level is-marginless">\n                <div class="level-left">\n                    <span id="song-current-time" class="level-item has-text-grey">{{ currentPlayedSeconds | formatSeconds }}</span>\n                </div>\n                <div class="level-item">\n                    <input id="song-played-progress" class="is-pulled-left" type="range" v-model="songProgress" min="0" max="1" step="0.01" />\n                </div>\n                <div class="level-right">\n                    <span id="song-duration" class="level-item has-text-grey">{{ nowPlayingLength }}</span>\n                </div>\n            </nav>\n            <div id="player-metadata-container" class="has-text-centered">\n                <h1 class="title is-4 cut-text" v-bind:title="nowPlayingTitle">{{ nowPlayingTitle }}</h1>\n                <h2 class="subtitle is-5 cut-text" v-bind:title="nowPlayingArtist"><a href="#" v-on:click.prevent="navigateToArtistPage(nowPlayingArtist);">{{ nowPlayingArtist }}</a></h2>\n            </div>\n            <div id="player-controls" class="is-unselectable">\n                <div class="has-text-centered player-buttons">\n                    <span v-bind:title="$t(\'player.buttons.shufflePlaylistHint\')" v-on:click.prevent="playerData.currentPlaylist.shuffle();" class="icon"><i class="fas fa-2x fa-random"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.toggleRepeatHint\')" v-bind:class="{ \'btn-active\': playerData.repeatTracksMode != \'none\' }" v-on:click.prevent="playerData.playback.toggleRepeatMode();" class="icon"><i class="fas fa-2x fa-redo"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.previousTrackHint\')" id="btn-previous" v-on:click.prevent="playerData.currentPlaylist.playPrevious();" class="icon"><i class="fas fa-2x fa-step-backward"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.pauseTrackHint\')" id="btn-pause" v-on:click.prevent="playerData.playback.pause();" v-if="playerData.isPlaying" class="icon"><i class="fas fa-2x fa-pause"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.playTrackHint\')" id="btn-play" v-on:click.prevent="playerData.playback.play();" v-else class="icon"><i class="fas fa-2x fa-play"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.nextTrackHint\')" id="btn-next" v-on:click.prevent="playerData.currentPlaylist.playNext();" class="icon"><i class="fas fa-2x fa-step-forward"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.unloveTrackHint\')" v-if="nowPlayingLoved" v-on:click.prevent="playerData.currentTrack.unSetLoved();" class="icon btn-active"><i class="fas fa-2x fa-heart"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.loveTrackHint\')" v-else v-on:click.prevent="playerData.currentTrack.setLoved();" class="icon"><i class="fas fa-2x fa-heart"></i></span>\n                    <span v-bind:title="$t(\'player.buttons.downloadTrackHint\')" id="btn-download" class="icon" v-on:click.prevent="playerData.currentTrack.download();"><i class="fas fa-2x fa-save"></i></span>\n                </div>\n                <div id="player-volume-control">\n                    <div class="columns">\n                        <div class="column is-narrow">\n                            <span v-bind:title="$t(\'player.buttons.toggleMuteHint\')" class="icon" v-on:click.prevent="toggleMute">\n                                <i v-if="volume > 0" class="fas fa-2x fa-volume-up"></i>\n                                <i v-else class="fas fa-2x fa-volume-off"></i>\n                            </span>\n                        </div>\n                        <div class="column">\n                            <input id="volume-range" type="range" v-model="volume" min="0" max="1" step="0.05" />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ',mixins:[mixinPlayer,mixinNavigation],data:function(){return{preMuteVolume:1,audio:null,vinylRotationEffect:!1}},computed:{hasRotateVinylClass:function(){return this.vinylRotationEffect&&"images/vinyl.png"==this.coverSrc},coverSrc:function(){return this.playerData.currentTrack.track&&this.playerData.currentTrack.track.radioStation?this.playerData.currentTrack.track.radioStation.image?"api/thumbnail?url="+encodeURIComponent(this.playerData.currentTrack.track.radioStation.image):"images/vinyl.png":this.playerData.currentTrack.track&&this.playerData.currentTrack.track.image?0==this.playerData.currentTrack.track.image.indexOf("http")?"api/thumbnail?url="+encodeURIComponent(this.playerData.currentTrack.track.image):"api/thumbnail?hash="+this.playerData.currentTrack.track.image:"images/vinyl.png"},streamUrl:function(){return this.playerData.currentTrack.track&&this.playerData.currentTrack.track.radioStation?this.playerData.currentTrack.track.radioStation.streamUrls[0]:this.playerData.currentTrack.track&&this.playerData.currentTrack.track.id?"api/track/get/"+this.playerData.currentTrack.track.id:""}},methods:{replaceAlbumThumbnailWithLoadError:function(){this.playerData.currentTrack.track&&this.playerData.currentTrack.track.radioStation?this.playerData.currentTrack.track.radioStation.image&&(this.playerData.currentTrack.track.radioStation.image=null):this.playerData.currentTrack.track&&this.playerData.currentTrack.track.image&&(this.playerData.currentTrack.track.image=null)},toggleMute:function(){this.audio.muted?this.audio.volume=this.preMuteVolume:(this.preMuteVolume=this.audio.volume,this.audio.volume=0),this.audio.muted=!this.audio.muted}},watch:{volume:function(a){this.audio.volume=a,spieldoseSettings.setCurrentSessionVolume(a)},streamUrl:function(a){if(a){this.audio.src=this.streamUrl,(this.isPlaying||this.isPaused)&&(this.audio.pause(),this.audio.currentTime=0),this.audio.load();let a=this.audio.play();if(void 0!==a&&a.then((function(){})).catch((function(a){})),this.playerData.currentTrack.index>=0){const a=document.getElementById("playlist-item-"+this.playerData.currentTrack.index);a&&a.scrollIntoView()}}else this.audio.currentTime=0,this.audio.pause()},isPlaying:function(a){a&&this.audio.play()},isPaused:function(a){0==a?this.audio.play():this.audio.pause()},isStopped:function(a){a&&(this.audio.pause(),this.audio.currentTime=0)}},mounted:function(){this.audio=document.createElement("audio"),this.audio.volume=spieldoseSettings.getCurrentSessionVolume();let a=this.audio;a.addEventListener("timeupdate",(t=>{const e=a.currentTime/a.duration;isNaN(e)?this.songProgress=0:this.songProgress=e.toFixed(2),this.currentPlayedSeconds=Math.floor(a.currentTime).toString()})),a.addEventListener("volumechange",(t=>{this.volume=a.volume})),a.addEventListener("ended",(()=>{"track"==this.playerData.repeatTracksMode?(this.audio.pause(),this.audio.currentTime=0,this.audio.play()):this.playerData.currentPlaylist.playNext()})),a.addEventListener("error",(a=>{this.playerData.currentPlaylist.playNext()})),document.getElementById("song-played-progress").addEventListener("click",(a=>{const t=a.target.getBoundingClientRect(),e=a.pageX-t.left;this.audio.currentTime=parseFloat(e)/parseFloat(a.target.offsetWidth)*100*this.audio.duration/100})),void 0!==window.IntersectionObserver&&new IntersectionObserver(((a,t)=>{a.forEach((a=>{a.intersectionRatio>0?bus.$emit("hidePlayerNavbar"):bus.$emit("showPlayerNavBar")}))})).observe(document.getElementById("player-controls"))},created:function(){this.playerData.currentPlaylist.loadRandomTracks(initialState.defaultResultsPage,(function(){}))}};