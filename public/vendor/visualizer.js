let audioContext,audioBuffer,audioAnalyserNode,textSize,canvasContext,canvasWidth,canvasHeight,multiplier,binWidth,displayBins=512,backgroundColour="#dbdbdb",barColour="#7a7a7a",songFont="15px 'Open Sans'",floorLevel=96,drawPitch=!0,drawCurved=!1,drawFilled=!1,drawText=!1,audioVisualizerInitialized=!1,songText="",finalBins=[],logLookupTable=[],logBinLengths=[],magicConstant=42;function initializeVisualizer(t,n){try{let e=window.AudioContext||window.webkitAudioContext;e&&(initCanvas(t),audioContext=new e,setupAudioApi(n))}catch(t){}}function updateSongText(t){songText=t,canvasContext&&(textSize=canvasContext.measureText(songText))}function setupAudioApi(t){let n=audioContext.createMediaElementSource(t);audioAnalyserNode=audioContext.createAnalyser(),audioAnalyserNode.fftSize=drawPitch?8*displayBins:2*displayBins,multiplier=Math.pow(22050,1/displayBins)*Math.pow(1/magicConstant,1/displayBins),finalBins=[],logLookupTable=[],logBinLengths=[];for(let t=0;t<displayBins;t++)finalBins.push(0),logLookupTable.push(0);createLookupTable(audioAnalyserNode.frequencyBinCount,logBinLengths,logLookupTable),binWidth=Math.ceil(canvasWidth/(displayBins-1)),n.connect(audioAnalyserNode),audioAnalyserNode.connect(audioContext.destination),audioVisualizerInitialized=!0}function initCanvas(t){canvasContext=t.getContext("2d"),canvasWidth=canvas.width,canvasHeight=canvas.height,requestAnimationFrame(paint),canvasContext.font=songFont,canvasContext.strokeStyle=barColour,textSize=canvasContext.measureText(songText)}function paint(){if(requestAnimationFrame(paint),!audioVisualizerInitialized)return;canvasContext.fillStyle=backgroundColour,canvasContext.fillRect(0,0,canvasWidth,canvasHeight);let t=audioAnalyserNode.frequencyBinCount,n=new Uint8Array(t);if(audioAnalyserNode.getByteFrequencyData(n),canvasContext.fillStyle=barColour,drawPitch?updateBinsLog(logLookupTable,n):updateBins(t,logBinLengths,n),drawCurved){let t;for(canvasContext.fillStyle=barColour,canvasContext.beginPath(),canvasContext.moveTo(0,canvasHeight-getBinHeight(0)),t=0;t<displayBins-2;){var e=t*binWidth,i=(e+(t+logBinLengths[t])*binWidth)/2,a=canvasHeight-getBinHeight(t),o=(a+(canvasHeight-getBinHeight(t+logBinLengths[t])))/2;canvasContext.quadraticCurveTo(e,a,i,o),t+=logBinLengths[t]}canvasContext.quadraticCurveTo(t*binWidth,canvasHeight-getBinHeight(t),(t+1)*binWidth,canvasHeight-getBinHeight(t+1)),drawFilled?(canvasContext.lineTo(canvasWidth,canvasHeight),canvasContext.lineTo(0,canvasHeight),canvasContext.fill()):canvasContext.stroke()}else for(let t=0;t<displayBins;t++)paintSingleBin(t);drawText&&(canvasContext.fillStyle="white",canvasContext.fillText(songText,canvasWidth/2-textSize.width/2,canvasHeight/2-7.5+15))}function averageRegion(t,n,e){if(e<=n)return t[n];let i=0;for(let a=n;a<e;a++)i+=t[a];return i/(e-n)}function updateBins(t,n,e){let i=t/displayBins;for(let t=0;t<displayBins;t++){let a=averageRegion(e,t*i,(t+1)*i-1);n.push(1),finalBins[t]=a}}function createLookupTable(t,n,e){if(drawPitch){let i=magicConstant/multiplier,a=0,o=0;for(let l=0;l<displayBins;l++){let s=i*multiplier;i=s;let d=Math.floor(t*s/22050);if(e[l]=d,a++,d!=o){for(let t=0;t<a;t++)n.push(a);a=0}o=d}}else for(let t=0;t<displayBins;t++)e[t]=t}function updateBinsLog(t,n){for(let e=0;e<displayBins;e++)finalBins[e]=n[t[e]]}function getBinHeight(t){let n=finalBins[t],e=Math.max(0,n-floorLevel);return e=e/(256-floorLevel)*canvasHeight*.8,e}function paintSingleBin(t){let n=getBinHeight(t);canvasContext.fillRect(t*binWidth,canvasHeight-n,binWidth,n)}